# Library imports
import lxml.etree
import numpy as np
import re

# Get directory for all the XMLs files
path = './XMLs'
# Notes on XML parsing
# <name x="5" y="5">busbar_IED</name>
# name is tag, x="5" y="5" is attrib, busbar_IED is text. P

#xml_file = ET.parse(path+"/Test_Busbar.xml")
xml_file = lxml.etree.parse(path+"/Test_Busbar.xml")
root_xml = xml_file.getroot()

# Function to get names of templates
def get_names(xml):
    names = []
    for elem in xml.findall(".//template/name"):
        names.append(elem.text)
        #print(elem.text)
    return names


class xml_data():
    def __init__(self, name):
        self.name = name
        self.node = root_xml.find(".//template[name='{}']".format(self.name))
        self.id_names = self.get_ids()
        self.matrix = self.form_matrix()

    def get_ids(self):
        find_src = self.node.findall(".//source")
        find_tgt = self.node.findall(".//target")
        ids = [at.attrib["ref"] for at in find_src]
        ids.extend([at.attrib["ref"] for at in find_src])
        id_names = sorted(set(ids))
        return id_names

    def find_condition(self):
        cond_loc = self.node.xpath(".//*[contains(text(), '!')][not(contains(text(), '!='))]/..") #"!" is used as precondition check
        #Need another way to find !, find guard and find !
        #cond_loc = cond_loc.xpath(".//*[not(contains(text(), '!='))]/..")  # "!" is used as precondition check
        if len(cond_loc) != 1:
            print("Error 400: No preconditions or multiple precondition found for {}! "
                  "Please code further or it is an error!".format(self.name))
            return '400'
        else:
            self.store_data(cond_loc)
            return cond_loc

    def find_vectors(self, element, hop=1): # Element is the starting point where '!' is found
        src = (element[0].find(".//source")).attrib["ref"]
        tgt = (element[0].find(".//target")).attrib["ref"]
        self.vector = [(src, tgt)]
        self.find_tgt(self.vector, hops=hop)

    def find_tgt(self, vectors, hops=1): #Hops is the number of hops from '!'
        hop = hops-1
        if hop == 0:
            #print(vectors)
            return vectors
        else:
            src = vectors[0][0]
            finder = (self.node.findall(".//target[@ref='{}']/..".format(src)))
            if len(finder) == 1:
                tgt = finder[0].find(".//source").attrib["ref"]
                self.store_data(finder) #Store data whenever a target is found
                self.vector.insert(0,(tgt, src))
                #print(self.vector)
            elif len(finder) >= 1:
                self.vector.insert(0, self.src_tgt_list(finder))
                print("Multiple targets as output! No further hops! Returning vectors! But xml data for "
                      "multiple vectors not stored in matrix")
                #self.store_data(finder)  # Store data whenever a target is found
                return self.vector
            else:
                return self.vector
        self.find_tgt(self.vector, hop)

    def form_matrix(self):
        self.idx = {}
        temp_cnt = 0
        for id in self.id_names:
            self.idx[id] = temp_cnt
            temp_cnt = temp_cnt + 1
        dim_names = set([elem.attrib["kind"] for elem in self.node.findall(".//*[@kind]")])
        self.dim = {}
        temp_cnt = 0
        for d in dim_names:
            self.dim[d] = temp_cnt
            temp_cnt = temp_cnt + 1
        m_matrix = {}
        for d in self.dim:
            m_matrix[d] = np.zeros((len(self.idx), len(self.idx)), dtype=object) # no. of Dimension, row, colmuns
        #m_matrix = np.zeros((len(self.dim), len(self.idx), len(self.idx)), dtype=object) # no. of Dimension, row, colmuns
        return m_matrix

    def store_data(self, elements):
        for elem in elements:
            row = (elem.find(".//source")).attrib["ref"]
            col = (elem.find(".//target")).attrib["ref"]
            kind = [e.attrib["kind"] for e in elem.findall(".//*[@kind]")]

            for label in kind:
                mtx = self.matrix[label].item((self.idx[row], self.idx[col]))
                elem_txt = (elem.find(".//*[@kind='{}']".format(label))).text
                if mtx is 0 or mtx is None:
                    self.matrix[label][self.idx[row], self.idx[col]] = [elem_txt]
                else:
                    if elem_txt not in mtx:
                        temp_data = mtx.append(elem_txt)
                        #temp_data.append(elem_txt)
                        self.matrix[label][self.idx[row], self.idx[col]] = temp_data

                #print((elem.find(".//*[@kind='{}']".format(label))).text)
                #self.matrix[self.dim[label], self.idx[row], self.idx[col]]= \
                #    (elem.find(".//*[@kind='{}']".format(label))).text

    def src_tgt_list(self, elements):
        temp_list = []
        for elem in elements:
            src = elem.find(".//source").attrib["ref"]
            tgt = elem.find(".//target").attrib["ref"]
            temp_list.append((src,tgt))
        return temp_list

xml_names = get_names(root_xml)
xml_dict = {}
for name in xml_names:
    xml_dict[name]=xml_data(name)
    cond_check = xml_dict[name].find_condition()
    if cond_check == '400':
        print("Error 400 generated! No vectors found in precondition for template name{}".format(name))
        xml_dict[name] = "Error 400: No pre-condition found!"

    elif len(cond_check) != 1:
        print("Error 401 generated! Too many precondition found for template name {}".format(name))
        xml_dict[name] = "Error 401: More than one or no pre-condition found!"

    else:
        xml_dict[name].find_vectors(cond_check, hop=2)

def get_conditions(data_xml):
    final_xml = data_xml.copy()
    for key in data_xml:
        if isinstance(data_xml[key], str) is False:
            for dim in data_xml[key].dim:
                temp_data = data_xml[key].matrix[dim][np.nonzero(data_xml[key].matrix[dim])]
                flattened_list = [y for x in temp_data for y in x]
                final_xml[key].matrix[dim] = flattened_list
        else:
            del final_xml[key]
    return final_xml

final_xmldata = get_conditions(xml_dict)

class form_attacks():
    def __init__(self, name, id_names, matrix):
        self.name = name
        self.id_names = id_names
        self.orig_matrix = matrix
        self.negated_matrix = matrix.copy()
        self.attacks = ["Replay", "Flood", "Injection", "Delete"]
        self.attack_map = {
            "Replay": " || ",
            "Flood": " && ",
            "Injection": " || ",
            "Delete": " && "
        }
        self.negate_cond = {
            "Replay": True,
            "Flood": False,
            "Injection": True,
            "Delete": False
        }
        self.negation_map = {
            "=="    : "!=",
            "!="    : "==",
            ">="    : "< ",
            "<="    : "> ",
            ">"     : "<=",
            "<"     : ">=",
        }
    def string_replace(self, string, index, replacement, length=2):
        temp_str = ""
        if length != 2:
            replacement = "*"
        for i in index:
            temp_str = string[:i] + replacement + string[i + length:]
            string = temp_str
        return string

    def add_space(self, input_str):
        string = input_str
        temp_string = "+|+".join(string)
        temp_string = temp_string.strip()
        temp_string = temp_string.replace(" ", "")
        spaces = [">=", "<=", "!=", "==", "&&", "||", "<", ">"]
        for s in spaces:
            if s == "<":
                for idx, ch in enumerate(temp_string):
                    if ch == "<" and temp_string[idx+1] != "=":
                        temp_val = temp_string[:idx] + " < " + temp_string[idx+1:]
                        temp_string = temp_val
            elif s == ">":
                for idx, ch in enumerate(temp_string):
                    if ch == ">" and temp_string[idx+1] != "=":
                        temp_val = temp_string[:idx] + " > " + temp_string[idx+1:]
                        temp_string = temp_val
            else:
                temp_s = temp_string.split(s)
                temp_s = (" " + s + " ").join(temp_s)
                temp_string = temp_s
        return temp_string

    def guard_negation(self, guard_str):
        temp_string = guard_str
        #temp_string = self.add_space(string)
        idx_bools = {}
        for k in self.negation_map:
            if temp_string.find(k) != -1:
                idx_bools[k] = temp_idx = [m.start() for m in re.finditer(k, temp_string)]
                temp_string = self.string_replace(temp_string,temp_idx,"**",len(k))
                temp_key = self.negation_map[k]
                idx_bools[temp_key] = idx_bools[k]
                del idx_bools[k]
        for key, value in idx_bools.items():
            temp_string = self.string_replace(temp_string, value, key)
         #   for v in value:
                #self.replace_str_index(text=temp_string, index=v, replacement=key)
         #       temp_val = temp_string[:v] + key + temp_string[v + 4:]
         #       temp_string = temp_val
        return temp_string.split("+|+")
       # self.negated_matrix["guard"] = temp_string.split("+|+")

    def create_attacks(self, attack_name=""):
        self.attack_scripts = {}
        temp_list = self.orig_matrix["guard"]
        temp_list = self.add_space(temp_list)
        if (attack_name != "" and attack_name in self.attacks):
            if self.negate_cond[attack_name] is True:
                atk_val = self.guard_negation(temp_list)
            negate_val = self.attack_map[attack_name]
            make_script = negate_val.join(atk_val) #Need to recode , for instance if the list has only one val.
            self.attack_scripts[attack_name] = make_script
        elif attack_name == "":
            for attack in self.attacks:
                if self.negate_cond[attack] is True:
                    atk_val = self.guard_negation(temp_list)
                negate_val = self.attack_map[attack]
                make_script = negate_val.join(atk_val)  # Need to recode , for instance if the list has only one val.
                self.attack_scripts[attack] = make_script

bro_script = {}
for key in final_xmldata:
    id_names = final_xmldata[key].id_names
    matrix = final_xmldata[key].matrix
    bro_script[key] = form_attacks(key, id_names, matrix)
    bro_script[key].create_attacks()
#for key in xml_dict:
#    print(key)

#print(xml_dict['busbar_IED'].matrix[0])
#print(xml_dict['feeder_IED'].matrix[0])
print("end")
#Step 1: Form class using xml_data("Used names"). Maxtrix is formed using ids in one of template name
#Step 2: Find guard condition which has "!" which will return matrix with vectors. Currently, it is expected to have
#only one guard condition with "!"
